# The name, version, and maintainer of this package
AC_INIT([freedom-launcher], [m4_esyscmd_s([./scripts/git-version])], [bsou@sifive.com])

# Initializes automake, enabling maintainer mode by default (which should be
# disabled by the archive generated by "make dist").
AM_INIT_AUTOMAKE([foreign subdir-objects])
AM_MAINTAINER_MODE([enable])

# Allows users to specify some device tree information.
AC_ARG_WITH([machine-name],
    [AS_HELP_STRING([--with-machine-name=NAME], [Install this machine with a particular name])],
    [],
    [with_machine_name="no"]
)

AS_IF([test "x$with_machine_name" != "xno"],
    [AC_SUBST([MACHINE_NAME], "$with_machine_name")],
    [AC_MSG_FAILURE([--with-machine-name is required])]
)

AC_ARG_WITH([machine-dts],
    [AS_HELP_STRING([--with-machine-dts=PATH], [The full path to the device tree])],
    [],
    [with_machine_dts="no"]
)

AS_IF([test "x$with_machine_dts" != "xno"],
    [AC_SUBST([MACHINE_DTS], "$with_machine_dts")],
    [AC_MSG_FAILURE([--with-machine-dts is required])]
)

AC_ARG_WITH([machine-verilog],
    [AS_HELP_STRING([--with-machine-verilog=PATH], [The full path to the verilog Makefile directory])],
    [],
    [with_machine_verilog="no"]
)

AS_IF([test "x$with_machine_verilog" != "xno"],
    [AC_SUBST([MACHINE_VERILOG], "$with_machine_verilog")],
    []
)

# Allows users to specify a path to DTC
AC_ARG_WITH([dtc],
    [AS_HELP_STRING([--with-dtc=PATH], [Use the given path to the device tree compiler])],
    [],
    [with_dtc=check]
)

AC_ARG_VAR(DTC, [The absolute path to dtc])
AS_IF([test "x$with_dtc" == "xcheck"],
    [AC_PATH_PROG(DTC, dtc, [no])],
    [DTC="$with_dtc"]
)
AS_IF([test "x$DTC" != "xno"],
    [AC_SUBST([DTC], "$DTC")],
    [AC_MSG_ERROR([Unable to find dtc, either place it in PATH or try the --with-dtc argument.])]
)

# Allows users to specify a path to freedom-openocdcfg-generator, which generates
# openocd configuration (cfg) file for embedded debugger that are require
# to target a machine.
AC_ARG_WITH([openocdcfg-generator],
    [AS_HELP_STRING([--with-openocdcfg-generator=PATH], [Use the given path to freedom-openocdcfg-generator])],
    [],
    [with_openocdcfg_generator=check]
)

AC_ARG_VAR(OPENOCDCFG_GENERATOR, [The absolute path of the freedom-openocdcfg-generator])
AS_IF([test "x$with_openocdcfg_generator" == "xcheck"],
    [AC_PATH_PROG(OPENOCDCFG_GENERATOR, freedom-openocdcfg-generator, [no])],
    [OPENOCDCFG_GENERATOR=$with_openocdcfg_generator]
)
AS_IF([test "x$OPENOCDCFG_GENERATOR" != "xno"],
    [AC_SUBST([OPENOCDCFG_GENERATOR], "$OPENOCDCFG_GENERATOR")],
    [AC_MSG_ERROR([Unable to find freedom-openocdcfg-generator, either place it in PATH or try the --with-openocdcfg-generator argument.])]
)

# Allows users to specify a path to freedom-makeattributes-generator, which
# generates makefile fragments that help set up the various CFLAGS that are
# required to target a machine.
AC_ARG_WITH([makeattributes-generator],
    [AS_HELP_STRING([--with-makeattributes-generator=PATH], [Use the given path to freedom-makeattributes-generator])],
    [],
    [with_makeattributes_generator=check]
)

AC_ARG_VAR(MAKEATTRIBUTES_GENERATOR, [The absolute path of the freedom-makeattributes-generator])
AS_IF([test "x$with_makeattributes_generator" == "xcheck"],
    [AC_PATH_PROG(MAKEATTRIBUTES_GENERATOR, freedom-makeattributes-generator, [no])],
    [MAKEATTRIBUTES_GENERATOR=$with_makeattributes_generator]
)
AS_IF([test "x$MAKEATTRIBUTES_GENERATOR" != "xno"],
    [AC_SUBST([MAKEATTRIBUTES_GENERATOR], "$MAKEATTRIBUTES_GENERATOR")],
    [AC_MSG_ERROR([Unable to find freedom-makeattributes-generator, either place it in PATH or try the --with-makeattributes-generator argument.])]
)

# Allows users to specify a path to openocd
AC_ARG_WITH([openocd],
    [AS_HELP_STRING([--with-openocd=PATH], [Use the given path to riscv-openocd])],
    [],
    [with_openocd=check]
)

AC_ARG_VAR(OPENOCD, [The absolute path to openocd])
AS_IF([test "x$with_openocd" == "xcheck"],
    [AC_PATH_PROG(OPENOCD, openocd, [no])],
    [DTC="$with_openocd"]
)
AS_IF([test "x$OPENOCD" != "xno"],
    [AC_SUBST([OPENOCD], "$OPENOCD")],
    [AC_MSG_ERROR([Unable to find openocd, either place it in PATH or try the --with-openocd argument.])]
)

# Allows users to specify a path to gdb
AC_ARG_WITH([gdb],
    [AS_HELP_STRING([--with-gdb=PATH], [Use the given path to the riscv64-sifive-elf-gdb])],
    [],
    [with_gdb=check]
)

AC_ARG_VAR(GDB, [The absolute path to riscv64-sifive-elf-gdb])
AS_IF([test "x$with_gdb" == "xcheck"],
    [AC_PATH_PROG(GDB, riscv64-sifive-elf-gdb, [no])],
    [DTC="$with_gdb"]
)
AS_IF([test "x$GDB" != "xno"],
    [AC_SUBST([GDB], "$GDB")],
    [AC_MSG_ERROR([Unable to find riscv64-sifive-elf-gdb, either place it in PATH or try the --with-gdb argument.])]
)

# Allows users to specify a path to Qemu32
AC_ARG_WITH([qemu32],
    [AS_HELP_STRING([--with-qemu32=PATH], [Use the given path to qemu-system-riscv32])],
    [],
    [with_qemu32=check]
)

AC_ARG_VAR(QEMU32, [The absolute path to qemu32])
AS_IF([test "x$with_qemu32" == "xcheck"],
    [AC_PATH_PROG(QEMU32, qemu-system-riscv32, [no])],
    [QEMU32="$with_qemu32"]
)
AS_IF([test "x$QEMU32" != "xno"],
    [AC_SUBST([QEMU32], "$QEMU32")],
    [AC_MSG_ERROR([Unable to find qemu-system-riscv32, either place it in PATH or try the --with-qemu32 argument.])]
)


# Allows users to specify a path to Qemu64
AC_ARG_WITH([qemu64],
    [AS_HELP_STRING([--with-qemu64=PATH], [Use the given path to qemu-system-riscv64])],
    [],
    [with_qemu64=check]
)

AC_ARG_VAR(QEMU64, [The absolute path to qemu64])
AS_IF([test "x$with_qemu64" == "xcheck"],
    [AC_PATH_PROG(QEMU64, qemu-system-riscv64, [no])],
    [QEMU64="$with_qemu64"]
)
AS_IF([test "x$QEMU64" != "xno"],
    [AC_SUBST([QEMU64], "$QEMU64")],
    [AC_MSG_ERROR([Unable to find qemu-system-riscv64, either place it in PATH or try the --with-qemu64 argument.])]
)

# Allows users to specify a path to elf2hex
AC_ARG_WITH([elf2hex],
    [AS_HELP_STRING([--with-elf2hex=PATH], [Use the given path to riscv64-sifive-elf-elf2hex])],
    [],
    [with_elf2hex=check]
)

AC_ARG_VAR(ELF2HEX, [The absolute path to riscv64-sifive-elf-elf2hex])
AS_IF([test "x$with_elf2hex" == "xcheck"],
    [AC_PATH_PROG(ELF2HEX, riscv64-sifive-elf-elf2hex, [no])],
    [ELF2HEX="$with_elf2hex"]
)
AS_IF([test "x$ELF2HEX" != "xno"],
    [AC_SUBST([ELF2HEX], "$ELF2HEX")],
    [AC_MSG_ERROR([Unable to find riscv64-sifive-elf-elf2hex, either place it in PATH or try the --with-elf2hex argument.])]
)


# Generates the remainder of the build system.
AC_CONFIG_FILES([Makefile])

AC_OUTPUT
