#!/bin/bash

set -e
set -o pipefail
tempdir="$(mktemp -d)"
trap "rm -rf $tempdir" EXIT
cd "$tempdir"

help() {
    cat >&2 <<EOF
$0: Freedom launcher for the SiFive Freedom SDK machine
    --help                            Prints this help text.
    --elf=ELF                         Specify location of elf program to use.
    --machine=MACHINE                 Specify the machine target to use.
    --fidelity=FIDELITY               Specify the fidelity type to run.
    --functional=QEMU                 Specify the functional type, like qemu.
    --cycle-accurate=CA_TYPE          Specify the cycle-accurate type, [ arty | vcs ].
EOF
}

unset ELF
unset MACHINE
FIDELITY="all"
unset FUNCTIONAL
unset CYCLE_ACCURATE
# Command-line argument handling
while [[ "$1" != "" ]]
do
    case "$1" in
    --help)             help "$0";               exit 0;;
    --elf=*)            ELF="$(echo "$1" | cut -d= -f2-)"; shift 1;;
    --elf)              ELF="$2";                shift 2;;
    --machine=*)        MACHINE="$(echo "$1" | cut -d= -f2-)"; shift 1;;
    --machine)          MACHINE="$2";            shift 2;;
    --fidelity=*)       FIDELITY="$(echo "$1" | cut -d= -f2-)"; shift 1;;
    --fidelity)         FIDELITY="$2";           shift 2;;
    --functional=*)     FUNCTIONAL="$(echo "$1" | cut -d= -f2-)"; shift 1;;
    --functional)       FUNCTIONAL="$2";         shift 2;;
    --cycle-accurate=*) CYCLE_ACCURATE="$(echo "$1" | cut -d= -f2-)"; shift 1;;
    --cycle-accurate)   CYCLE_ACCURATE="$2";     shift 2;;
    *) echo "$0: unknown argument $1" >&2;       exit 1;;
    esac
done


if [[ "$ELF" == "" || ! -e "$ELF" ]]
then
    echo "$0: --elf is a required argument and must exist" >&2
    exit 1
fi

ELF_NAME="$(basename "$ELF" | cut -d. -f1)"
ln -s "$ELF" "program.elf"

if [[ "$MACHINE" == "" ]]
then
    echo "$0: --machine is a required argument" >&2
    exit 1
fi

if [[ "$FIDELITY" != "" && \
      "$FIDELITY" != "all" && \
      "$FIDELITY" != "functional" && \
      "$FIDELITY" != "cycle-accurate" ]]
then
    echo "$0: Unsupport fidelity type $FIDELITY" >&2
    help "$0"
    exit 1
fi

if [[ "$FIDELITY" == "functional" ]]
then
    if [[ "$FUNCTIONAL" != "" && "$FUNCTIONAL" != "qemu" ]]
    then
        echo "$0: functional $FUNCTIONAL is not a support type" >&2
        echo "$0: Current support type is qemu" >&2
        exit 1
    fi
fi

if [[ "$FIDELITY" == "cycle-accurate" ]]
then
    if [[ "$CYCLE_ACCURATE" != "" && \
          "$CYCLE_ACCURATE" != "arty" && "$CYCLE_ACCURATE" != "vcs" ]]
    then
	echo "$0: cycle-accurate $CYCLE_ACCURATE is not a support type" >&2
	echo "$0: Current support types are [ arty | vcs ]" >&2
	exit 1
    fi
fi

function launch_fidelity_qemu () {
    if [[ "$2" == "sifive-hifive1" ]]
    then
        launch_qemu-"$2"
    else
	echo "$0: Qemu only support hifive1!" >&1
    fi
}

function launch_fidelity_openocd () {
    lsusb | grep "Olimex Ltd. ARM-USB-TINY-H JTAG interface" > ".lsusb-$2" || true
    if [[ -s ".lsusb-$2" ]]
    then
        launch_openocd-"$2"
    else
        echo "$0: No arty present!" >&1
    fi
}

function launch_fidelity_simv () {
    launch_simv-"$2"
}

function launch_default_fidelity () {
    launch_fidelity_qemu $1 $2
    launch_fidelity_openocd $1 $2
    launch_fidelity_simv $1 $2
}

if [[ "$FIDELITY" == "all" ]]
then
    launch_default_fidelity $ELF $MACHINE
    exit 0
fi

if [[ "$FUNCTIONAL" == "qemu" ]]
then
    launch_fidelity_qemu $ELF $MACHINE
    exit 0
fi

if [[ "$CYCLE_ACCURATE" == "arty" ]]
then
    launch_fidelity_openocd $ELF $MACHINE
    exit 0
fi

if [[ "$CYCLE_ACCURATE" == "vcs" ]]
then
    launch_fidelity_simv $ELF $MACHINE
    exit 0
fi

help
exit 0
